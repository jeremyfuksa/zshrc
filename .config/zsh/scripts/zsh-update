#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print with color
print_color() {
    echo -e "${2}${1}${NC}"
}

# Detect OS and package manager
detect_os() {
    case "$(uname)" in
        "Darwin")
            OS_NAME="macOS"
            PKG_MANAGER="brew"
            ;;
        "Linux")
            if [ -f /etc/os-release ]; then
                . /etc/os-release
                OS_NAME="$NAME"
                case "$ID" in
                    "ubuntu"|"debian")
                        PKG_MANAGER="apt"
                        ;;
                    "fedora")
                        PKG_MANAGER="dnf"
                        ;;
                    "centos"|"rhel")
                        PKG_MANAGER="yum"
                        ;;
                    "arch"|"manjaro")
                        PKG_MANAGER="pacman"
                        ;;
                    *)
                        PKG_MANAGER="unknown"
                        ;;
                esac
            else
                OS_NAME="Unknown Linux"
                PKG_MANAGER="unknown"
            fi
            ;;
        *)
            OS_NAME="Unknown"
            PKG_MANAGER="unknown"
            ;;
    esac
}

# Check if running as root
if [ "$EUID" -eq 0 ]; then
    print_color "Please do not run as root" "$RED"
    exit 1
fi

# Backup function
backup_config() {
    local backup_dir="$HOME/.config/zsh/backups"
    local timestamp=$(date +%Y%m%d_%H%M%S)
    
    print_color "Creating backup..." "$BLUE"
    mkdir -p "$backup_dir"
    
    # Backup .zshrc
    if [ -f "$HOME/.zshrc" ]; then
        cp "$HOME/.zshrc" "$backup_dir/zshrc_$timestamp.bak"
    fi
    
    # Backup config directory
    if [ -d "$HOME/.config/zsh" ]; then
        tar -czf "$backup_dir/zsh_config_$timestamp.tar.gz" -C "$HOME/.config" zsh
    fi
    
    print_color "Backup created in $backup_dir" "$GREEN"
}

# Check dependencies
check_dependencies() {
    local missing_deps=()
    
    # Check for git
    if ! command -v git >/dev/null 2>&1; then
        missing_deps+=("git")
    fi
    
    # Check for curl
    if ! command -v curl >/dev/null 2>&1; then
        missing_deps+=("curl")
    fi
    
    # Check for zsh
    if ! command -v zsh >/dev/null 2>&1; then
        missing_deps+=("zsh")
    fi
    
    # If any dependencies are missing, try to install them
    if [ ${#missing_deps[@]} -gt 0 ]; then
        print_color "Missing dependencies: ${missing_deps[*]}" "$YELLOW"
        print_color "Attempting to install missing dependencies..." "$BLUE"
        
        case "$PKG_MANAGER" in
            "brew")
                brew install "${missing_deps[@]}"
                ;;
            "apt")
                sudo apt update && sudo apt install -y "${missing_deps[@]}"
                ;;
            "dnf")
                sudo dnf install -y "${missing_deps[@]}"
                ;;
            "yum")
                sudo yum install -y "${missing_deps[@]}"
                ;;
            "pacman")
                sudo pacman -S --noconfirm "${missing_deps[@]}"
                ;;
            *)
                print_color "Could not install dependencies automatically. Please install them manually:" "$RED"
                print_color "${missing_deps[*]}" "$RED"
                exit 1
                ;;
        esac
    fi
}

# Update function
update_zsh() {
    local zsh_dir="$HOME/.config/zsh"
    
    # Detect OS and package manager
    detect_os
    print_color "Detected OS: $OS_NAME" "$BLUE"
    
    # Check dependencies
    check_dependencies
    
    # Check if we're in the right directory
    if [ ! -d "$zsh_dir" ]; then
        print_color "ZSH configuration directory not found at $zsh_dir" "$RED"
        exit 1
    fi
    
    # Create backup before updating
    backup_config
    
    # Change to the zsh directory
    cd "$zsh_dir" || exit 1
    
    # Pull latest changes
    print_color "Pulling latest changes..." "$BLUE"
    if ! git pull origin main; then
        print_color "Failed to pull latest changes" "$RED"
        exit 1
    fi
    
    # Make install script executable
    print_color "Updating installation..." "$BLUE"
    chmod +x install.sh
    
    # Run installation script
    if ! ./install.sh; then
        print_color "Installation failed" "$RED"
        exit 1
    fi
    
    # Update platform-specific configurations
    case "$OS_NAME" in
        "macOS")
            # Update Homebrew packages if needed
            if command -v brew >/dev/null 2>&1; then
                print_color "Updating Homebrew packages..." "$BLUE"
                brew update && brew upgrade
            fi
            ;;
        "Ubuntu"|"Debian GNU/Linux")
            # Update apt packages if needed
            print_color "Updating system packages..." "$BLUE"
            sudo apt update && sudo apt upgrade -y
            ;;
        *)
            print_color "Note: Automatic package updates not configured for $OS_NAME" "$YELLOW"
            ;;
    esac
    
    print_color "\nUpdate complete! ðŸŽ‰" "$GREEN"
    print_color "Please restart your terminal or run 'source ~/.zshrc' to apply changes." "$YELLOW"
}

# Main execution
update_zsh 
